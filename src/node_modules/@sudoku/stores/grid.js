import { BOX_SIZE, SUDOKU_SIZE } from '@sudoku/constants';
import { decodeSencode, encodeSudoku } from '@sudoku/sencode';
import { generateSudoku, solveSudoku } from '@sudoku/sudoku';
import { derived, writable } from 'svelte/store';
import { hints } from './hints';

function createGrid() {
	const grid = writable([
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
	]);

	return {
		subscribe: grid.subscribe,

		generate(difficulty) {
			grid.set(generateSudoku(difficulty));
		},

		decodeSencode(sencode) {
			grid.set(decodeSencode(sencode));
		},

		get(gridStore, x, y) {
			return gridStore[y][x];
		},

		getSencode(gridStore) {
			return encodeSudoku(gridStore);
		},
	};
}

export const grid = createGrid();


function createUserGrid() {
	const userGrid = writable([
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
	]);

	const undoStack = [];
	const redoStack = [];
	const branchStack = [];
	const branchwrongStack = [];

	const isUndoable = writable(false);
	const isRedoable = writable(false);
	const isBackToBranchable = writable(false);

	function updateIsUndoable() {
        isUndoable.set(undoStack.length > 0);
    }

	function updateisRedoable() {
        isRedoable.set(redoStack.length > 0);
    }

	function updateisBackToBranchable() {
        isBackToBranchable.set(branchStack.length);
    }

	grid.subscribe($grid => {
		let newGrid = [];

		for (let y = 0; y < SUDOKU_SIZE; y++) {
			newGrid[y] = [];
			for (let x = 0; x < SUDOKU_SIZE; x++) {
				newGrid[y][x] = $grid[y][x];
			}
		}

		userGrid.set(newGrid);
	});

	return {
		subscribe: userGrid.subscribe,

		set: (pos, value, branch = false) => {
			userGrid.update($userGrid => {
				// 记录当前值以支持撤回
				const previousValue = $userGrid[pos.y][pos.x];
				undoStack.push({ pos, value: previousValue });
				if (branch) {
                    branchStack.push(undoStack.length - 1);
                }
				// 清空重做栈
				redoStack.length = 0;
				// 设置新值
				$userGrid[pos.y][pos.x] = value;

				updateIsUndoable();
				updateisRedoable();
				updateisBackToBranchable();

				return $userGrid;
			});
		},

		undo: () => {
			if (undoStack.length > 0) {
				const { pos, value } = undoStack.pop();
				userGrid.update($userGrid => {
					// 记录当前值以支持重做
					const currentValue = $userGrid[pos.y][pos.x];
					redoStack.push({ pos, value: currentValue });
					// 恢复之前的值
					$userGrid[pos.y][pos.x] = value;

					updateIsUndoable();
					updateisRedoable();
					updateisBackToBranchable();

					return $userGrid;
				});
				// 检查是否需要弹出branchStack中的标记
                if (branchStack.length > 0 && undoStack.length <= branchStack[branchStack.length - 1]) {
                    branchStack.pop();
                }
			}
		},

		redo: () => {
			if (redoStack.length > 0) {
				const { pos, value } = redoStack.pop();
				userGrid.update($userGrid => {
					// 记录当前值以支持撤回
					const currentValue = $userGrid[pos.y][pos.x];
					undoStack.push({ pos, value: currentValue });
					// 恢复之前的值
					$userGrid[pos.y][pos.x] = value;
					
					updateIsUndoable();
					updateisRedoable();
					updateisBackToBranchable();
					
					return $userGrid;
				});
			}
		},

		backToBranch: () => {
            if (branchStack.length > 0) {
                const branchIndex = branchStack.pop();
				let { pos, value } = { pos: 0, value: 0 };
                while (undoStack.length > branchIndex) {
                    ({ pos, value } = undoStack.pop());
                    userGrid.update($userGrid => {
                        const currentValue = $userGrid[pos.y][pos.x];
                        redoStack.push({ pos, value: currentValue });
                        $userGrid[pos.y][pos.x] = value;
                        return $userGrid;
                    });
                }
				
				branchwrongStack.push({ pos, value });
				console.log(branchwrongStack);
				
                updateIsUndoable();
				updateisRedoable();
				updateisBackToBranchable();
            }
        },

		applyHint: (pos) => {
			hints.useHint();
			userGrid.update($userGrid => {
				const solvedSudoku = solveSudoku($userGrid);
				$userGrid[pos.y][pos.x] = solvedSudoku[pos.y][pos.x];
				return $userGrid;
			});
		},

		isUndoable,
		isRedoable,
		isBackToBranchable,

        undoStack,
        redoStack,
		branchStack,
	};
}

export const userGrid = createUserGrid();

export const invalidCells = derived(userGrid, $userGrid => {
	const _invalidCells = [];

	const addInvalid = (x, y) => {
		const xy = x + ',' + y;
		if (!_invalidCells.includes(xy)) _invalidCells.push(xy);
	};

	for (let y = 0; y < SUDOKU_SIZE; y++) {
		for (let x = 0; x < SUDOKU_SIZE; x++) {

			const value = $userGrid[y][x];

			if (value) {
				for (let i = 0; i < SUDOKU_SIZE; i++) {
					// Check the row
					if (i !== x && $userGrid[y][i] === value) {
						addInvalid(x, y);
					}

					// Check the column
					if (i !== y && $userGrid[i][x] === value) {
						addInvalid(x, i);
					}
				}

				// Check the box
				const startY = Math.floor(y / BOX_SIZE) * BOX_SIZE;
				const endY = startY + BOX_SIZE;
				const startX = Math.floor(x / BOX_SIZE) * BOX_SIZE;
				const endX = startX + BOX_SIZE;
				for (let row = startY; row < endY; row++) {
					for (let col = startX; col < endX; col++) {
						if (row !== y && col !== x && $userGrid[row][col] === value) {
							addInvalid(col, row);
						}
					}
				}
			}

		}
	}

	return _invalidCells;
}, []);