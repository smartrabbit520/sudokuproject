import { cursor } from './stores/cursor';
import { difficulty } from './stores/difficulty';
import { gamePaused } from './stores/game';
import { grid } from './stores/grid';
import { timer } from './stores/timer';
import { userGrid } from './stores/grid';
import { candidates } from './stores/candidates';
import { num } from './stores/currentValueStore';

/**
 * Start new game with a generated sudoku
 *
 * @param {('veryeasy' | 'easy' | 'medium' | 'hard')} diff - Difficulty
 */
export function startNew(diff) {
	num.set(-1);
	console.log(num);
	difficulty.set(diff);
	grid.generate(diff);
	// cursor.reset();
	userGrid.resetOperationStates();
	timer.reset();
	candidates.clearAll();
	// console.log("123")
	userGrid.candidateonlySet.set(new Set());
	location.hash = '';
	num.set(0);
	console.log("start new over")
}

/**
 * Start new game with a custom sudoku
 *
 * @param {string} sencode - Sencode to decode
 */
export function startCustom(sencode) {
	num.set(0);
	// console.log("num" + num);
	difficulty.setCustom();
	grid.decodeSencodeDirect(sencode);
	userGrid.resetOperationStates();
	// cursor.reset();
	timer.reset();
	userGrid.candidateonlySet.set(new Set());
	// hints.reset();
	candidates.clearAll();
}

/**
 * Pause the game
 */
export function pauseGame() {
	timer.stop();
	gamePaused.set(true);
}

/**
 * Resume (un-pause) the game
 */
export function resumeGame() {
	timer.start();
	gamePaused.set(false);
// cursor.reset();
	
	// 重置操作状态
	userGrid.resetOperationStates();
}
export function startGame(){
	timer.start();
	gamePaused.set(false);
}

export default {
	startNew,
	startCustom,
	pause: pauseGame,
	resume: resumeGame
};