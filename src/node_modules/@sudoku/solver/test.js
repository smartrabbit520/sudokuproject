import {
    arrayToSudoku,
    printSudoku,
    NakedPairsSolver,
    XYWingSolver,
    XYZWingSolver,
    WWingSolver,
    stringToSudoku,
    SimpleSolver,
    NakedTriplesSolver,
    GridXYSolver,
    cloneSudoku,
    YXWingSolver,
    checkSudokuDifferent,
    MiscellaneousSolver,
    XWingSolver
} from '@sudoku/solver/solver.js';

// 示例数独输入
let sudokuArray = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
];

sudokuArray = [
    [6, 0, 0, 0, 0, 0, 0, 0, 8],
    [5, 0, 0, 9, 0, 8, 0, 0, 7],
    [8, 2, 0, 0, 0, 1, 0, 3, 0],
    [3, 4, 0, 2, 0, 9, 0, 8, 0],
    [2, 0, 0, 0, 8, 0, 3, 0, 0],
    [1, 8, 0, 3, 0, 7, 0, 2, 5],
    [7, 5, 0, 4, 0, 0, 0, 9, 2],
    [9, 0, 0, 0, 0, 5, 0, 0, 4],
    [4, 0, 0, 0, 9, 0, 0, 0, 3]
];

// sudokuArray = [
//     [0, 5, 9, 0, 0, 0, 3, 0, 0],
//     [0, 7, 2, 0, 6, 0, 5, 0, 4],
//     [0, 0, 0, 8, 0, 0, 0, 0, 2],
//     [0, 0, 0, 3, 5, 0, 0, 4, 0],
//     [0, 0, 0, 0, 4, 0, 8, 3, 6],
//     [0, 0, 0, 0, 1, 0, 0, 0, 0],
//     [0, 4, 6, 0, 0, 0, 0, 0, 0],
//     [0, 0, 0, 0, 0, 4, 0, 8, 9],
//     [1, 0, 0, 0, 0, 7, 0, 0, 0]
// ];

let sudoku = arrayToSudoku(sudokuArray);

function runAll(sudoku) {
    // SimpleSolver
    console.log('SimpleSolver Start');

    let otherSudoku = cloneSudoku(sudoku);

    sudoku = new SimpleSolver().solver(sudoku);

    checkSudokuDifferent(sudoku, otherSudoku);

    console.log('SimpleSolver End');

    // NakedPairsSolver

    console.log('NakedPairsSolver Start');

    otherSudoku = cloneSudoku(sudoku);

    sudoku = new NakedPairsSolver().solver(sudoku);

    checkSudokuDifferent(sudoku, otherSudoku);

    console.log('NakedPairsSolver End');

    // NakedTriplesSolver

    console.log('NakedTriplesSolver Start');

    otherSudoku = cloneSudoku(sudoku);

    sudoku = new NakedTriplesSolver().solver(sudoku);

    checkSudokuDifferent(sudoku, otherSudoku);

    console.log('NakedTriplesSolver End');

    // MiscellaneousSolver

    console.log('MiscellaneousSolver Start');

    otherSudoku = cloneSudoku(sudoku);

    sudoku = new MiscellaneousSolver().solver(sudoku);

    checkSudokuDifferent(sudoku, otherSudoku);

    console.log('MiscellaneousSolver End');

    // XYWingSolver

    console.log('XYWingSolver Start');

    otherSudoku = cloneSudoku(sudoku);

    sudoku = new XYWingSolver().solver(sudoku);

    checkSudokuDifferent(sudoku, otherSudoku);

    console.log('XYWingSolver End');

    // YXWingSolver

    console.log('YXWingSolver Start');

    otherSudoku = cloneSudoku(sudoku);

    sudoku = new YXWingSolver().solver(sudoku);

    checkSudokuDifferent(sudoku, otherSudoku);

    console.log('YXWingSolver End');

    // XYZWingSolver

    console.log('XYZWingSolver Start');

    otherSudoku = cloneSudoku(sudoku);

    sudoku = new XYZWingSolver().solver(sudoku);

    checkSudokuDifferent(sudoku, otherSudoku);

    console.log('XYZWingSolver End');

    // XWingSolver

    console.log('XWingSolver Start');

    otherSudoku = cloneSudoku(sudoku);

    sudoku = new XWingSolver().solver(sudoku);

    checkSudokuDifferent(sudoku, otherSudoku);

    console.log('XWingSolver End');

    // GridXYSolver

    console.log('GridXYSolver Start');

    otherSudoku = cloneSudoku(sudoku);

    sudoku = new GridXYSolver().solver(sudoku);

    checkSudokuDifferent(sudoku, otherSudoku);

    console.log('GridXYSolver End');

    // WWingSolver

    // console.log('WWingSolver Start');
    //
    // otherSudoku = cloneSudoku(sudoku);
    //
    // sudoku = new WWingSolver().solver(sudoku);
    //
    // checkSudokuDifferent(sudoku, otherSudoku);
    //
    // console.log('WWingSolver End');

    printSudoku(sudoku);

    return sudoku;
}

for (let i = 0; i < 10; i++) {
    console.log(`第${i + 1}次迭代`);

    let originalSudoku = cloneSudoku(sudoku);

    sudoku = runAll(sudoku);

    if (!checkSudokuDifferent(sudoku, originalSudoku)) {
        console.log('数独无法继续解决');
        console.log(`结束迭代，共迭代${i + 1}次`);
        break;
    }

    console.log('----------------------');
}




