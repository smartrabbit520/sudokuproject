class BaseSolver {
    solver(sudoku) {

        return sudoku;
    }

    getSolverName() {
        return "BaseSolver";
    }
}

class SimpleSolver {
    solver(sudoku) {
        

        return sudoku;
    }

    getSolverName() {
        return "SimpleSolver";
    }
}

class NakedPairsSolver extends BaseSolver {

    houses = [];

    init() {
        for (let row = 0; row < 9; row++) {
            let rowSet = new Set();
            for (let i = 0; i < 9; i++) {
                rowSet.add([row, i]);
            }
            this.houses.push(rowSet);
        }

        for (let col = 0; col < 9; col++) {
            let colSet = new Set();
            for (let i = 0; i < 9; i++) {
                colSet.add([i, col]);
            }
            this.houses.push(colSet);
        }

        for (let block = 0; block < 9; block++) {
            let blockSet = new Set();
            let rowStart = Math.floor(block / 3) * 3;
            let colStart = (block % 3) * 3;
            for (let r = 0; r < 3; r++) {
                for (let c = 0; c < 3; c++) {
                    blockSet.add([rowStart + r, colStart + c]);
                }
            }
            this.houses.push(blockSet);
        }
    }

    solver(sudokuBoard) {
        this.init();

        this.board = sudokuBoard;

        this.prune(this.board.board);

        return this.board;
    }

    prune(sets) {
        let didSomething;
        do {
            didSomething = false;
            // 裸单一 (Naked Singles)
            for (let i = 0; i < 9; i++) {
                for (let j = 0; j < 9; j++) {
                    if (sets[i][j].size === 1) {
                        let digit = [...sets[i][j]][0];
                        for (let house of this.houses) {
                            if (house.has([i, j])) {
                                for (let [r, c] of house) {
                                    if (r !== i || c !== j) {
                                        sets[r][c].delete(digit);
                                        didSomething = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            // 隐藏单一 (Hidden Singles)
            for (let house of this.houses) {
                for (let digit = 1; digit <= 9; digit++) {
                    let digitPositions = [];
                    for (let [r, c] of house) {
                        if (sets[r][c].has(digit)) {
                            digitPositions.push([r, c]);
                        }
                    }
                    if (digitPositions.length === 1) {
                        let [r, c] = digitPositions[0];
                        if (sets[r][c].size > 1) {
                            sets[r][c] = new Set([digit]);
                            didSomething = true;
                        }
                    }
                }
            }
        } while (didSomething);
        return true;
    }

}